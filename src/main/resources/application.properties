spring.application.name=app-circuitbreaker-ef


# Controla cuanta solicitudes recurrente como maximo se puede indicar antes de registrarlo como solicitudes fallidas
#Si la API empieza a fallar, el circuito se abre y se evita que las solicitudes lleguen a la API
resilience4j.circuitbreaker.instances.myService.slidingWindowSize=10

# Numero minimo de solicitudes que se deben alcanzar antes de que el circuito pueda abrirse
resilience4j.circuitbreaker.instances.myService.minimumNumberOfCalls=5

#Porcentaje de solicitudes fallidas que se deben alcanzar para abrir el circuito
resilience4j.circuitbreaker.instances.myService.failureRateThreshold=50

resilience4j.circuitbreaker.instances.myService.waitDurationInOpenState=10
resilience4j.circuitbreaker.instances.myService.permittedNumberOfCallsInHalfOpenState=3

resilience4j.circuitbreaker.instances.myService.slowCallDurationThreshold=2s

resilience4j.circuitbreaker.instances.myService.slowCallRateThreshold=60
management.endpoints.web.exposure.include=health,info,circuitbreakers,metrics
